less:
安装步骤：
npm install less
（最新版本）npm install less@lateast

先引入<link rel="stylesheet/less" type="text/css" href="styles.less">
然后在<head>里引入<script src="less.js" type="text/javascript"></script>
注意less样式文件一定要在引入less.js前引入

可以在main文件中通过下面的形式引入.less文件，.less后缀可带可不带
@import "lib.less";
@import "lib";
如果想导入一个CSS文件而且不想less对他进行处理，只需要使用.css后缀就可以：
@import "lib.css";
这样LESS就不会去处理它。

变量：
// LESS

@color: #4D926F;

#header {
  color: @color;
}
h2 {
  color: @color;
}
/* 生成的 CSS */

#header {
  color: #4D926F;
}
h2 {
  color: #4D926F;
}

混合：
在LESS中可以定义一些通用的属性集为一个class，然后在另一个class中去调用这些属性
.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
如果现在需要在其他class中引入那些通用的的属性集，那么只需要在任何class中像下面这样调用就可以：
#menu a {
  color: #111;
  .bordered;
}
.post a {
  color: red;
  .bordered;
}
输出的CSS#menu a {
  color: #111;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
.post a {
  color: red;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}

任何CSS class，id或者元素属性集都可以用同样的方式引入

带参数混合
还可以像函数一样定义一个带参数的属性集合：
.border-radius (@radius) {
  border-radius: @radius;
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
}
然后再其他class中引用：
#header {
  .border-radius(4px);
}
.button {
  .border-radius(6px);  
}
还可以事先设置默认值：
.border-radius (@radius: 5px) {
  border-radius: @radius;
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
}
然后调用：
#header {
  .border-radius;  
}
radius的值就是5px。
也可以定义不带参数的属性集合：
.wrap () {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}

pre { .wrap }
输出的是：

pre {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}
@arguments包含了所有传递进来的参数，如果不想单独处理每一个参数的话就可以这样：
.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #000) {
  box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  -webkit-box-shadow: @arguments;
}
.box-shadow(2px, 5px);
它输出的是：
box-shadow: 2px 5px 1px #000;
  -moz-box-shadow: 2px 5px 1px #000;
  -webkit-box-shadow: 2px 5px 1px #000;



嵌套：
#header {
  color: black;

  .navigation {
    font-size: 12px;
  }
  .logo {
    width: 300px;
    &:hover { text-decoration: none }
  }
}
或者
#header        { color: black;
  .navigation  { font-size: 12px }
  .logo        { width: 300px;
    &:hover    { text-decoration: none }
  }
}
输出的是
#header { color: black; }
#header .navigation {
  font-size: 12px;
}
#header .logo { 
  width: 300px; 
}
#header .logo:hover {
  text-decoration: none;
}
注意&符号的使用-如果想写串联选择器，而不是写后代选择器，就可以用&了。这点对伪类尤其有用，如：hover和：focus

// LESS

#header {
  h1 {
    font-size: 26px;
    font-weight: bold;
  }
  p { font-size: 12px;
    a { text-decoration: none;
      &:hover { border-width: 1px }
    }
  }
}

/* 生成的 CSS */

#header h1 {
  font-size: 26px;
  font-weight: bold;
}
#header p {
  font-size: 12px;
}
#header p a {
  text-decoration: none;
}
#header p a:hover {
  border-width: 1px;
}

运算
任何数字、颜色或者变量都可以直接参与运算。
如：
@base: 5%;
@filler: @base * 2;
@other: @base + @filler;

color: #888 / 4;
background-color: @base-color + #111;
height: 100% / 2 + @filler;

less的运算能够分辨出颜色和单位。比如
@var：1px+5；
less会输出6px。
括号也同样适用，并且可以在复合属性中进行运算：
width: (@var + 5) * 2;
border: (@width * 2) solid black;

color函数
less提供了一系列的颜色运算函数。
lighten(@color, 10%);     // return a color which is 10% *lighter* than @color
darken(@color, 10%);      // return a color which is 10% *darker* than @color

saturate(@color, 10%);    // return a color 10% *more* saturated than @color//深色
desaturate(@color, 10%);  // return a color 10% *less* saturated than @color

fadein(@color, 10%);      // return a color 10% *less* transparent than @color//透明的
fadeout(@color, 10%);     // return a color 10% *more* transparent than @color
fade(@color, 50%);        // return @color with 50% transparency

spin(@color, 10);         // return a color with a 10 degree larger in hue than @color//色度
spin(@color, -10);        // return a color with a 10 degree smaller hue than @color

mix(@color1, @color2);    // return a mix of @color1 and @color2//混合

使用@base: #f04615;

.class {
  color: saturate(@base, 5%);
  background-color: lighten(spin(@base, 8), 25%);
}

Math函数
less提供了一组方便的数学函数，可以使用他们处理一些数字类型的值：
round(1.67); // returns `2`
ceil(2.4);   // returns `3`
floor(2.6);  // returns `2`
如果想将一个值转化为百分比，可以使用percentage函数：
percentage(0.5); // returns `50%`

作用域
less中的作用域跟其他编程语言非常类似，首先会从本地查找变量或者混合模块，如果没有找到的话回去父级作用域中查找，直到找到为止。
@var: red;

#page {
  @var: white;
  #header {
    color: @var; // white
  }
}

#footer {
  color: @var; // red  
}

